/*
 * This file is generated by jOOQ.
 */
package be.app.sb.db.tables.daos;


import be.app.sb.db.tables.Employee;
import be.app.sb.db.tables.records.EmployeeRecord;

import java.time.LocalDate;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EmployeeDao extends DAOImpl<EmployeeRecord, be.app.sb.db.tables.pojos.Employee, Integer> {

    /**
     * Create a new EmployeeDao without any configuration
     */
    public EmployeeDao() {
        super(Employee.EMPLOYEE, be.app.sb.db.tables.pojos.Employee.class);
    }

    /**
     * Create a new EmployeeDao with an attached configuration
     */
    public EmployeeDao(Configuration configuration) {
        super(Employee.EMPLOYEE, be.app.sb.db.tables.pojos.Employee.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Integer getId(be.app.sb.db.tables.pojos.Employee object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>ID IN (values)</code>
     */
    public List<be.app.sb.db.tables.pojos.Employee> fetchById(Integer... values) {
        return fetch(Employee.EMPLOYEE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    public be.app.sb.db.tables.pojos.Employee fetchOneById(Integer value) {
        return fetchOne(Employee.EMPLOYEE.ID, value);
    }

    /**
     * Fetch records that have <code>USER_NAME IN (values)</code>
     */
    public List<be.app.sb.db.tables.pojos.Employee> fetchByUserName(String... values) {
        return fetch(Employee.EMPLOYEE.USER_NAME, values);
    }

    /**
     * Fetch a unique record that has <code>USER_NAME = value</code>
     */
    public be.app.sb.db.tables.pojos.Employee fetchOneByUserName(String value) {
        return fetchOne(Employee.EMPLOYEE.USER_NAME, value);
    }

    /**
     * Fetch records that have <code>BIRTH_DATE IN (values)</code>
     */
    public List<be.app.sb.db.tables.pojos.Employee> fetchByBirthDate(LocalDate... values) {
        return fetch(Employee.EMPLOYEE.BIRTH_DATE, values);
    }

    /**
     * Fetch records that have <code>FIRST_NAME IN (values)</code>
     */
    public List<be.app.sb.db.tables.pojos.Employee> fetchByFirstName(String... values) {
        return fetch(Employee.EMPLOYEE.FIRST_NAME, values);
    }

    /**
     * Fetch records that have <code>LAST_NAME IN (values)</code>
     */
    public List<be.app.sb.db.tables.pojos.Employee> fetchByLastName(String... values) {
        return fetch(Employee.EMPLOYEE.LAST_NAME, values);
    }

    /**
     * Fetch records that have <code>GENDER IN (values)</code>
     */
    public List<be.app.sb.db.tables.pojos.Employee> fetchByGender(String... values) {
        return fetch(Employee.EMPLOYEE.GENDER, values);
    }

    /**
     * Fetch records that have <code>HIRE_DATE IN (values)</code>
     */
    public List<be.app.sb.db.tables.pojos.Employee> fetchByHireDate(LocalDate... values) {
        return fetch(Employee.EMPLOYEE.HIRE_DATE, values);
    }

    /**
     * Fetch records that have <code>PASSWORD IN (values)</code>
     */
    public List<be.app.sb.db.tables.pojos.Employee> fetchByPassword(String... values) {
        return fetch(Employee.EMPLOYEE.PASSWORD, values);
    }

    /**
     * Fetch records that have <code>ROLE IN (values)</code>
     */
    public List<be.app.sb.db.tables.pojos.Employee> fetchByRole(String... values) {
        return fetch(Employee.EMPLOYEE.ROLE, values);
    }

    /**
     * Fetch records that have <code>DEPARTMENT_ID IN (values)</code>
     */
    public List<be.app.sb.db.tables.pojos.Employee> fetchByDepartmentId(Integer... values) {
        return fetch(Employee.EMPLOYEE.DEPARTMENT_ID, values);
    }
}
